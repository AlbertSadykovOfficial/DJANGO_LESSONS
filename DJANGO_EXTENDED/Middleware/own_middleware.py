"""

    Написание посредников:

        Посредники можо реализовыавать как функции и как классы

"""

"""
    
    Посредники-функции
        
        Такие функции в качестве результата возвращают другую функцию
        
        "Внешняя" функция в качестве ед. п-ра должна принимать также функцию.
        Принимаемая ф-ция - либо след в списке посредник (если это не последний в списке), 
                            либо контроллер (если текущий посредник-последний в списке)
        
        "Внутренняя" ф-я, которая возвращатся ВНЕШНЕЙ в качестве результата,
        должна в качесвте единственного результат принимать запрос в виде HttpResponse
        В процессе работы в ее теле будет вызвана функция-обработчик, которая была получена 
        в качестве параметра ВНЕШНЕЙ ф-цией и которой будет предан объект запроса.
        В результате ф-ция обработчик вернет HttpResponse, представляющий сгенерированный
        пользователем ответ.
        Этот ответ стоит вернуть из внутренней функции в качестве рещультата.
        
        Перед вызовом функции-обработчика модно разместить код, который выполняет обработку
        запроса и, возможно, добавляетв него какие-либо новые атрибуты или меняет его содержимое.
        После вызова функции-обработчика можо разметсить код, обрабатывающий полученный от контроллрера ответ  

"""

# Шаблон, согласно которому пишутся посредники-функции:

def my_middleware(get_response):
    # Выполняем какую-нибуль инициализацию

    def core_middleware(request):
        # Обработка клиентского запроса
        #   ...
        response = get_response(request)
        # Обработка ответа
        #   ...
        return response
    return core_middleware

"""

    Посредники-классы
    
        Сложнее в написании, чем функции, но дают больше возможностей
        
        Минимум класса:
        1) Конструктор- принимает функцию-обработчик
        2) __call__() - принмает объект запроса
                        возвращает объект ответа
        
        Дополнительно:
         process_view(<запрос>, <контроллер>, <позиционны параметры>, <именованные параметры>)
            (выполняется перед вызовом следующего посредника или контроллера)
         
         process_exception(<запрос>, <exception>) - вызывается при возбуждении исключения в теле контроллера
         
         process_template_response(<запрос>, <ответ>) - вызывается после того, как контроллер сгенерировал ответ,
                                                        но пред рендерингом шаблона. ответ- TemplateResponse
                                                        Должен возвращать ответ в виде TemplateResponse 
"""

# Шаблон
class MyMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        # Выполняет инициализацию

    def __call__(self, request):
        # Обработка клиентского запроса
        response = self.get_response(request)

        # Здесь выполняется обработка ответа
        return response

# Пример посредника, добавляющего в контектс шаблона доп данные:
#
# + Регистрируем в MIDDLEWARE: 'board.middlewares.RubricsMiddleware'
# После чего можем удалить из контроллеров код, добавляющий в контектст шаблона
# список рубрик,при условии, что ответ во всех контроллерах формируется в виде TemplateResponse

from .models import Rubric

class RubricMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        return self.get_response(request)

    def process_template_response(self, request, response):
        response.context_data['rubrics'] = Rubric.objects.all()
        retur response